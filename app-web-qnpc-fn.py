from flask import Flask, render_template, request, Response, stream_with_context
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import time

app = Flask(__name__, template_folder="templates", static_folder="static")

# H√†m ghi d·ªØ li·ªáu v√†o Google Sheets
def write_to_google_sheets(data):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open_by_key("11eUWnFjsHTpHX81Ap6idXd-SDhzO1pCOQ0NNOptYxv8").sheet1
        sheet.append_rows([["ID", "Ti√™u ƒë·ªÅ", "Ng√†y ƒëƒÉng", "N·ªôi dung", "N·ªôi dung edit", "Tr·∫°ng th√°i", "Link"]])
        sheet.append_rows(data)
    except gspread.exceptions.APIError as e:
        print("Google Sheets API Error:", e.response.status_code)
    except Exception as e:
        print(f"Error writing to Google Sheets: {str(e)}")

# H√†m l·∫•y b√†i vi·∫øt v√† ghi v√†o Google Sheets
def get_articles_and_save_to_sheets(num_articles):
    try:
        # Th·ª±c hi·ªán l·∫•y b√†i vi·∫øt (thay th·∫ø b·∫±ng c√°ch l·∫•y d·ªØ li·ªáu t·ª´ ngu·ªìn kh√°c)
        articles = [
            ("Title 1", "http://example.com/1"),
            ("Title 2", "http://example.com/2")
        ]
        
        # Ch·ªâ ƒë·ªãnh c√°c th√¥ng tin b√†i vi·∫øt (gi·∫£ s·ª≠ b√†i vi·∫øt c√≥ ng√†y v√† n·ªôi dung c·ªë ƒë·ªãnh)
        news_list = []
        for i, (title, link) in enumerate(articles):
            print(f"ƒêang x·ª≠ l√Ω b√†i {i + 1}: {title}")
            date = "2025-04-17"  # Gi·∫£ s·ª≠ ng√†y ƒëƒÉng
            content = "N·ªôi dung b√†i vi·∫øt gi·∫£ l·∫≠p."
            
            news_list.append([i + 1, title, date, content, "", "Ch·ªù duy·ªát", link])
            time.sleep(0.3)

        print("ƒêang ghi d·ªØ li·ªáu v√†o Google Sheets...")
        write_to_google_sheets(news_list)
        return True
    except Exception as e:
        print(f"L·ªói khi l·∫•y b√†i vi·∫øt: {e}")
        return False

# ƒêo·∫°n code Flask gi·ªØ nguy√™n ƒë·ªÉ ti·∫øp t·ª•c ch·∫°y app
@app.route('/')
def index():
    return render_template("index.html")

@app.route('/stream_logs', methods=["POST"])
def stream_logs():
    def generate_logs():
        try:
            num_articles = int(request.form.get("num_articles", 0))
            if num_articles <= 0:
                yield "data: ‚ùå S·ªë l∆∞·ª£ng b√†i vi·∫øt kh√¥ng h·ª£p l·ªá.\n\n"
                yield "event: done\ndata: failed\n\n"
                return

            start_time = time.time()
            yield f"data: üì• Y√™u c·∫ßu l·∫•y {num_articles} b√†i vi·∫øt\n\n"
            yield "data: üîÑ ƒêang l·∫•y danh s√°ch b√†i vi·∫øt...\n\n"

            if get_articles_and_save_to_sheets(num_articles):
                duration = round(time.time() - start_time, 2)
                yield f"data: ‚úÖ Ho√†n t·∫•t! ‚è±Ô∏è M·∫•t {duration} gi√¢y.\n\n"
                yield "event: done\ndata: success\n\"
            else:
                yield "data: ‚ùå L·ªói khi x·ª≠ l√Ω b√†i vi·∫øt.\n\n"
                yield "event: done\ndata: failed\n\n"

        except Exception as e:
            yield f"data: ‚ùå L·ªói: {str(e)}\n\n"
            yield "event: done\ndata: failed\n\n"

    return Response(stream_with_context(generate_logs()), mimetype='text/event-stream')

if __name__ == '__main__':
    app.run(debug=False, threaded=True)
