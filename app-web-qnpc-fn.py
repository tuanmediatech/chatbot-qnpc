import logging
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
import subprocess

# Thi·∫øt l·∫≠p logging ƒë·ªÉ ki·ªÉm tra c√°c ho·∫°t ƒë·ªông
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Khai b√°o Flask app v√† Telegram bot
app = Flask(__name__)
TELEGRAM_TOKEN = "7862312312:AAGRe-kNQPtz2CDmfowFlCAPmJbYUIcJKvgn"  # Thay th·∫ø b·∫±ng token c·ªßa bot
bot = Bot(token=TELEGRAM_TOKEN)

# Webhook URL (thay yourdomain.com b·∫±ng URL c·ªßa b·∫°n ho·∫∑c URL t·ª´ ngrok n·∫øu ƒëang th·ª≠ nghi·ªám local)
WEBHOOK_URL = f"https://chatbot-qnpc.onrender.com/{TELEGRAM_TOKEN}"

# H√†m x·ª≠ l√Ω tin nh·∫Øn t·ª´ Telegram
def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    # ƒêo·∫°n m√£ x·ª≠ l√Ω tin nh·∫Øn
    if "l·∫•y" in text and "b√†i" in text:
        try:
            # Tr√≠ch xu·∫•t s·ªë b√†i vi·∫øt t·ª´ tin nh·∫Øn
            so_bai = int(''.join(filter(str.isdigit, text)))
            logger.info(f"Nh·∫≠n y√™u c·∫ßu l·∫•y {so_bai} b√†i vi·∫øt")

            update.message.reply_text(f"üì• ƒê√£ nh·∫≠n y√™u c·∫ßu. ƒêang ti·∫øn h√†nh l·∫•y {so_bai} b√†i vi·∫øt...")

            # G·ªçi script x·ª≠ l√Ω l·∫•y b√†i vi·∫øt (gi·∫£ s·ª≠ app-web-qnpc-fn.py x·ª≠ l√Ω)
            subprocess.Popen(["python", "app-web-qnpc-fn.py", str(so_bai)])

            update.message.reply_text(
                "‚úÖ ƒêang x·ª≠ l√Ω... Vui l√≤ng ƒë·ª£i kho·∫£ng 30‚Äì60 gi√¢y.\n"
                "üìÑ K·∫øt qu·∫£ s·∫Ω c√≥ tr√™n Google Sheets:\n"
                "üîó https://docs.google.com/spreadsheets/d/11eUWnFjsHTpHX81Ap6idXd-SDhzO1pCOQ0NNOptYxv8/edit?gid=907517028#gid=907517028"
            )

        except ValueError:
            update.message.reply_text("‚ö†Ô∏è Kh√¥ng r√µ s·ªë b√†i vi·∫øt b·∫°n mu·ªën l·∫•y. Vui l√≤ng th·ª≠ l·∫°i nh∆∞: *l·∫•y 5 b√†i vi·∫øt*", parse_mode="Markdown")
        except Exception as e:
            logger.error(f"L·ªói trong x·ª≠ l√Ω: {str(e)}")
            update.message.reply_text("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.")
    else:
        update.message.reply_text("üëã Nh·∫Øn: *l·∫•y 5 b√†i vi·∫øt* ƒë·ªÉ b·∫Øt ƒë·∫ßu.", parse_mode="Markdown")

# Route ch√≠nh ƒë·ªÉ ki·ªÉm tra Flask server ho·∫°t ƒë·ªông
@app.route('/', methods=['GET'])
def index():
    logger.info("Flask Server is Running!")  # Log khi Flask ƒëang ch·∫°y
    return "‚úÖ Flask Server is Running!"

# Webhook route x·ª≠ l√Ω POST t·ª´ Telegram
@app.route('/' + TELEGRAM_TOKEN, methods=['POST'])
def webhook():
    json_str = request.get_data(as_text=True)
    update = Update.de_json(json_str, bot)
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    dispatcher = application.dispatcher
    dispatcher.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    
    try:
        dispatcher.process_update(update)
        logger.info("ƒê√£ x·ª≠ l√Ω webhook th√†nh c√¥ng.")
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω webhook: {str(e)}")

    return 'ok'

if __name__ == "__main__":
    # Ch·∫°y Flask app
    app.run(port=5000, debug=True)
