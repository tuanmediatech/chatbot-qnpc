from flask import Flask, render_template, request, Response, stream_with_context
from playwright.sync_api import sync_playwright
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import time
import threading
import os
import sys
import webbrowser

# ‚úÖ ƒê∆∞·ªùng d·∫´n t·ªõi browser c·ªßa Playwright (n·∫øu c·∫ßn)
os.environ["PLAYWRIGHT_BROWSERS_PATH"] = os.path.join(os.getcwd(), "pw-browsers")

# ‚úÖ C·∫•u h√¨nh Google Sheets
json_keyfile = "my-project-74363-183-e47d0199afbb.json"
spreadsheet_id = "11eUWnFjsHTpHX81Ap6idXd-SDhzO1pCOQ0NNOptYxv8"

app = Flask(__name__, template_folder="templates", static_folder="static")

# ‚úÖ H√†m m·ªü tr√¨nh duy·ªát (ch·ªâ d√πng cho Flask app)
def open_browser():
    webbrowser.open_new("http://127.0.0.1:5000")

# ‚úÖ H√†m l·∫•y b√†i vi·∫øt v√† ghi v√†o Google Sheets
def get_articles_and_save_to_sheets(num_articles):
    try:
        print(f"üì• ƒêang l·∫•y {num_articles} b√†i vi·∫øt...")
        articles = get_articles(num_articles)
        if not articles:
            print("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c b√†i vi·∫øt.")
            return False

        news_list = []
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            page = browser.new_page()

            for i, (title, link) in enumerate(articles):
                print(f"üîé ƒêang x·ª≠ l√Ω b√†i {i + 1}: {title}")
                page.goto(link)
                try:
                    date = page.locator("#mvcContainer-11766 .heading-content p span").nth(0).inner_text(timeout=60000)
                except:
                    date = "Kh√¥ng c√≥ ng√†y"

                content_locator = page.locator("#mvcContainer-11766 .article-content p").all()
                content = " ".join([p.inner_text() for p in content_locator]) if content_locator else "Kh√¥ng c√≥ n·ªôi dung"

                news_list.append([i + 1, title, date, content, "", "Ch·ªù duy·ªát", link])
                time.sleep(0.3)

            browser.close()

        print("‚úÖ ƒêang ghi d·ªØ li·ªáu v√†o Google Sheets...")
        write_to_google_sheets(news_list)
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y b√†i vi·∫øt: {e}")
        return False

# ‚úÖ H√†m ghi v√†o Google Sheets
def write_to_google_sheets(data):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(json_keyfile, scope)
        client = gspread.authorize(creds)
        sheet = client.open_by_key(spreadsheet_id).sheet1
        sheet.clear()
        sheet.append_rows([["ID", "Ti√™u ƒë·ªÅ", "Ng√†y ƒëƒÉng", "N·ªôi dung", "N·ªôi dung edit", "Tr·∫°ng th√°i", "Link"]])
        sheet.append_rows(data)
    except gspread.exceptions.APIError as e:
        print("‚ùå Google Sheets API Error:", e.response.status_code)
    except Exception as e:
        print(f"‚ùå Error writing to Google Sheets: {str(e)}")

# ‚úÖ Placeholder: H√†m n√†y b·∫°n c·∫ßn t·ª± ƒë·ªãnh nghƒ©a
def get_articles(num_articles):
    with sync_playwright() as p:
        print("üîó ƒêang ki·ªÉm tra kh·∫£ nƒÉng truy c·∫≠p trang web...")
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        page.goto("https://pcquangngai.cpc.vn", timeout=60000)
        page.wait_for_selector("#mvcContainer-12285")

        articles_locator = page.locator("#mvcContainer-12285").locator("a.title-link")
        articles = articles_locator.all()
        article_list = [(articles[i].inner_text(), articles[i].get_attribute("href")) for i in range(min(num_articles, len(articles)))]

        browser.close()
        return article_list



# ‚úÖ Route Flask (ch·∫°y tr√™n tr√¨nh duy·ªát)
@app.route('/')
def index():
    return render_template("index.html")

@app.route('/stream_logs', methods=["POST"])
def stream_logs():
    def generate_logs():
        try:
            num_articles = int(request.form.get("num_articles", 0))
            if num_articles <= 0:
                yield "data: ‚ùå S·ªë l∆∞·ª£ng b√†i vi·∫øt kh√¥ng h·ª£p l·ªá.\n\n"
                yield "event: done\ndata: failed\n\n"
                return

            start_time = time.time()
            yield f"data: üì• Y√™u c·∫ßu l·∫•y {num_articles} b√†i vi·∫øt\n\n"
            yield "data: üîÑ ƒêang l·∫•y danh s√°ch b√†i vi·∫øt...\n\n"

            if get_articles_and_save_to_sheets(num_articles):
                duration = round(time.time() - start_time, 2)
                yield f"data: ‚úÖ Ho√†n t·∫•t! ‚è±Ô∏è M·∫•t {duration} gi√¢y.\n\n"
                yield "event: done\ndata: success\n\n"
            else:
                yield "data: ‚ùå L·ªói khi x·ª≠ l√Ω b√†i vi·∫øt.\n\n"
                yield "event: done\ndata: failed\n\n"

        except Exception as e:
            yield f"data: ‚ùå L·ªói: {str(e)}\n\n"
            yield "event: done\ndata: failed\n\n"

    return Response(stream_with_context(generate_logs()), mimetype='text/event-stream')

# ‚úÖ N·∫øu ch·∫°y t·ª´ Terminal ho·∫∑c t·ª´ Bot Telegram
if __name__ == '__main__':
    # N·∫øu g·ªçi t·ª´ terminal (c√≥ tham s·ªë)
    if len(sys.argv) > 1:
        try:
            num_articles = int(sys.argv[1])
            print(f"üëâ ƒê∆∞·ª£c g·ªçi t·ª´ bot Telegram: l·∫•y {num_articles} b√†i vi·∫øt")
            get_articles_and_save_to_sheets(num_articles)
        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu t·ª´ bot Telegram: {e}")
    else:
        # M·∫∑c ƒë·ªãnh ch·∫°y Flask n·∫øu kh√¥ng c√≥ tham s·ªë
        threading.Timer(1.5, open_browser).start()
        app.run(debug=False, threaded=True)
