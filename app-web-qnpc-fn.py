import os
import json
import logging
import subprocess
from flask import Flask, request, jsonify
from telegram import Update
from telegram.ext import Application, MessageHandler, ContextTypes, filters

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)

# T·∫°o Flask app
app = Flask(__name__)

# ƒê·ªçc TELEGRAM_TOKEN t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_SECRET_PATH = "/webhook"

# Kh·ªüi t·∫°o Telegram bot app
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

# X·ª≠ l√Ω tin nh·∫Øn Telegram
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if "l·∫•y" in text and "b√†i" in text:
        try:
            so_bai = int(''.join(filter(str.isdigit, text)))

            await update.message.reply_text(f"üì• ƒê√£ nh·∫≠n y√™u c·∫ßu. ƒêang ti·∫øn h√†nh l·∫•y {so_bai} b√†i vi·∫øt...")

            # Ch·∫°y subprocess file x·ª≠ l√Ω
            subprocess.Popen(["python", "xu-ly-lay-bai.py", str(so_bai)])

            await update.message.reply_text(
                "‚úÖ ƒêang x·ª≠ l√Ω... Vui l√≤ng ƒë·ª£i 30‚Äì60 gi√¢y.\n"
                "üìÑ K·∫øt qu·∫£ s·∫Ω c√≥ tr√™n Google Sheets:\n"
                "üîó https://docs.google.com/spreadsheets/d/11eUWnFjsHTpHX81Ap6idXd-SDhzO1pCOQ0NNOptYxv8/edit?gid=907517028#gid=907517028"
            )
        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è Kh√¥ng r√µ s·ªë b√†i vi·∫øt b·∫°n mu·ªën l·∫•y. H√£y nh·∫Øn nh∆∞: *l·∫•y 5 b√†i vi·∫øt*", parse_mode="Markdown")
        except Exception as e:
            logging.error(f"L·ªói khi x·ª≠ l√Ω l·∫•y b√†i: {e}")
            await update.message.reply_text("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.")
    else:
        await update.message.reply_text(
            "üëã G·ª≠i tin nh·∫Øn: *l·∫•y 5 b√†i vi·∫øt* ƒë·ªÉ b·∫Øt ƒë·∫ßu.", parse_mode="Markdown"
        )

# G·∫Øn handler cho bot
telegram_app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

# Route ki·ªÉm tra server s·ªëng
@app.route('/', methods=['GET'])
def index():
    return "‚úÖ Flask Server is Running!"

# Route webhook Telegram
@app.route(WEBHOOK_SECRET_PATH, methods=['POST'])
def webhook():
    try:
        update = Update.de_json(request.get_json(force=True), telegram_app.bot)
        telegram_app.update_queue.put_nowait(update)
    except Exception as e:
        logging.error(f"Webhook error: {e}")
    return jsonify({"status": "ok"})

# Set webhook khi server start
async def set_webhook():
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_SECRET_PATH}"
    await telegram_app.bot.set_webhook(webhook_url)
    logging.info(f"Webhook set: {webhook_url}")

if __name__ == "__main__":
    import asyncio

    asyncio.run(set_webhook())

    app.run(host="0.0.0.0", port=5000)
