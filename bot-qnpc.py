import os
import asyncio
import logging
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o Flask app v√† Telegram bot
app = Flask(__name__)
TELEGRAM_TOKEN = "7862312312:AAGRe-kNQPtz2CDmfowFlCAPmJbYUIcJKvgn"
bot = Bot(token=TELEGRAM_TOKEN)

# Webhook URL
WEBHOOK_URL = f"https://chatbot-qnpc.onrender.com/{TELEGRAM_TOKEN}"

# H√†m set webhook
async def set_webhook():
    await bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook set th√†nh c√¥ng: {WEBHOOK_URL}")

# H√†m x·ª≠ l√Ω tin nh·∫Øn Telegram
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if "l·∫•y" in text and "b√†i" in text:
        try:
            so_bai = int(''.join(filter(str.isdigit, text)))
            logger.info(f"Nh·∫≠n y√™u c·∫ßu l·∫•y {so_bai} b√†i vi·∫øt")

            await update.message.reply_text(f"üì• ƒê√£ nh·∫≠n y√™u c·∫ßu. ƒêang l·∫•y {so_bai} b√†i...")

            # G·ªçi script x·ª≠ l√Ω l·∫•y b√†i vi·∫øt
            # subprocess.Popen(["python", "app-web-qnpc-fn.py", str(so_bai)])  # B·ªè ghi ch√∫ n·∫øu c√≥ script ri√™ng

            await update.message.reply_text(
                "‚úÖ ƒêang x·ª≠ l√Ω...\n"
                "üìÑ K·∫øt qu·∫£ s·∫Ω c√≥ tr√™n Google Sheets:\n"
                "üîó https://docs.google.com/spreadsheets/d/11eUWnFjsHTpHX81Ap6idXd-SDhzO1pCOQ0NNOptYxv8/edit?gid=907517028#gid=907517028"
            )

        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è Kh√¥ng r√µ s·ªë b√†i vi·∫øt. H√£y g·ª≠i tin nh·∫Øn nh∆∞: *l·∫•y 5 b√†i vi·∫øt*",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"L·ªói: {e}")
            await update.message.reply_text("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.")
    else:
        await update.message.reply_text("üëã G·ª≠i: *l·∫•y 5 b√†i vi·∫øt* ƒë·ªÉ b·∫Øt ƒë·∫ßu.", parse_mode="Markdown")

# Route ki·ªÉm tra server s·ªëng
@app.route('/', methods=['GET'])
def index():
    return "‚úÖ Server is running!"

# Route nh·∫≠n webhook t·ª´ Telegram
@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def webhook():
    json_str = request.get_data(as_text=True)
    update = Update.de_json(json_str, bot)

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    dispatcher = application.dispatcher
    dispatcher.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    try:
        dispatcher.process_update(update)
        logger.info("‚úÖ ƒê√£ x·ª≠ l√Ω webhook th√†nh c√¥ng.")
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω webhook: {e}")

    return 'ok'

# Route ƒë·ªÉ set webhook th·ªß c√¥ng
@app.route('/set_webhook', methods=['GET'])
def setup_webhook():
    asyncio.run(set_webhook())
    return "‚úÖ Webhook ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng!"
