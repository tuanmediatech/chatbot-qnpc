import logging
import os
import subprocess
import asyncio
import json
from flask import Flask, request
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

# B·∫≠t log
logging.basicConfig(level=logging.INFO)

# Flask app setup
app = Flask(__name__)

# Khai b√°o Token & Webhook
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # N√™n d√πng bi·∫øn m√¥i tr∆∞·ªùng
WEBHOOK_SECRET = TELEGRAM_TOKEN  # Secret webhook route (d√πng lu√¥n token cho ƒë∆°n gi·∫£n)
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")  # N·∫øu deploy tr√™n Render
if not RENDER_EXTERNAL_HOSTNAME:
    RENDER_EXTERNAL_HOSTNAME = "yourdomain.com"  # N·∫øu test local
WEBHOOK_URL = f"https://{RENDER_EXTERNAL_HOSTNAME}/{WEBHOOK_SECRET}"

# T·∫°o Telegram Application
application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
bot = application.bot

# H√†m x·ª≠ l√Ω tin nh·∫Øn
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    if "l·∫•y" in text and "b√†i" in text:
        try:
            # Tr√≠ch xu·∫•t s·ªë b√†i
            so_bai = int(''.join(filter(str.isdigit, text)))
            await update.message.reply_text(f"üì• ƒê√£ nh·∫≠n y√™u c·∫ßu. ƒêang ti·∫øn h√†nh l·∫•y {so_bai} b√†i vi·∫øt...")

            # Ch·∫°y script x·ª≠ l√Ω
            subprocess.Popen(["python", "xu-ly-lay-bai.py", str(so_bai)])

            await update.message.reply_text(
                "‚úÖ ƒêang x·ª≠ l√Ω... Vui l√≤ng ƒë·ª£i kho·∫£ng 30‚Äì60 gi√¢y.\n"
                "üìÑ K·∫øt qu·∫£ s·∫Ω c√≥ tr√™n Google Sheets:\n"
                "üîó https://docs.google.com/spreadsheets/d/11eUWnFjsHTpHX81Ap6idXd-SDhzO1pCOQ0NNOptYxv8/edit#gid=0"
            )
        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è Kh√¥ng r√µ s·ªë b√†i vi·∫øt b·∫°n mu·ªën l·∫•y. Vui l√≤ng th·ª≠ l·∫°i nh∆∞: *l·∫•y 5 b√†i vi·∫øt*",
                parse_mode="Markdown"
            )
        except Exception as e:
            logging.error(f"L·ªói x·ª≠ l√Ω y√™u c·∫ßu: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.")
    else:
        await update.message.reply_text(
            "üëã Nh·∫Øn: *l·∫•y 5 b√†i vi·∫øt* ƒë·ªÉ b·∫Øt ƒë·∫ßu.",
            parse_mode="Markdown"
        )

# G·∫Øn handler
application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

# Flask webhook route
@app.route(f"/{WEBHOOK_SECRET}", methods=["POST"])
def webhook():
    try:
        update = Update.de_json(request.get_json(force=True), bot)
        application.update_queue.put_nowait(update)
    except Exception as e:
        logging.error(f"Webhook error: {str(e)}")
    return "ok"

# H√†m set webhook t·ª± ƒë·ªông khi start
async def set_webhook():
    await bot.set_webhook(url=WEBHOOK_URL)
    logging.info(f"‚úÖ Webhook ƒë√£ set: {WEBHOOK_URL}")

# Main
if __name__ == "__main__":
    asyncio.run(set_webhook())
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
